linewidth = 1) +
facet_wrap(~variable + scenario) +
ylab(expression(CO[2]~Concentration~(ppm))) +
theme_light() +
guides(alpha = "none") +
ggtitle(expression("CO"[2]~"concentration projections 1990 to 2100"))
plot_co2
ggsave("co2_projection.png",
device = "png",
path = "figure_output/",
width = 10,
height = 8,
units = c("cm"),
dpi = 300)
ggsave("co2_projection.png",
device = "png",
path = "figure_output/",
width = 15,
height = 12,
units = c("cm"),
dpi = 300)
#' Calculating probabilities
#'
#' @param h_result A hector result
#' @param metric A metric to filter results of interest
#' @param criterionA criterion used to score Hector runs
#' @param bins Bins for computing probabilities - defaults for global_tas
#'
#' @return A data frame of probabilities
probabilities <- function(h_result,
metric,
crit,
bins = c(1, 1.5, 2, 3, 4, Inf)) {
# calculating metrics
metrics = metric_calc(h_result, metric)
# calculating scores
scores = score_hruns(h_result, crit, score_ramp, w1 = 2, w2 = 20)
# merging metrics and scores
metric_scores = merge(metrics, scores, by = "run_number")
# calculating probability
probability = prob_calc(metric_scores$metric_result, bins,
metric_scores$scores)
# coercing probability to data frame for plotting
probs = as.data.frame(probability)
# return
return(probs)
}
# defining metric of mean global_tas for 1990:2100
metric_global_tas <- new_metric(GLOBAL_TAS(), years = 1990:2100, op = mean)
# Calculating probabilities for each hector run
probs_126 <- probabilities(hector_126, metric_global_tas, criterion_co2_obs())
probs_126$scenario <- rep("ssp_126")
probs_245 <- probabilities(hector_245, metric_global_tas, criterion_co2_obs())
probs_245$scenario <- rep("ssp_245")
probs_370 <- probabilities(hector_370, metric_global_tas, criterion_co2_obs())
probs_370$scenario <- rep("ssp_370")
probs_585 <- probabilities(hector_585, metric_global_tas, criterion_co2_obs())
probs_585$scenario <- rep("ssp_585")
#combining dfs with scenario types and probs
results_all <- rbind(probs_126,
probs_245,
probs_370,
probs_585)
colnames(results_all) <- c("Warming", "Score" ,"Probability", "Scenario")
# defining metric of mean global_tas for 1990:2100
metric_global_tas <- new_metric(GLOBAL_TAS(), years = 1990:2100, op = mean)
# Calculating probabilities for each hector run
probs_126 <- probabilities(hector_126, metric_global_tas, criterion_co2_obs())
probs_126$scenario <- rep("SSP1-2.6")
probs_245 <- probabilities(hector_245, metric_global_tas, criterion_co2_obs())
probs_245$scenario <- rep("SSP2-4.5")
probs_370 <- probabilities(hector_370, metric_global_tas, criterion_co2_obs())
probs_370$scenario <- rep("SSP3-7.0")
probs_585 <- probabilities(hector_585, metric_global_tas, criterion_co2_obs())
probs_585$scenario <- rep("SSP5-8.5")
#combining dfs with scenario types and probs
results_all <- rbind(probs_126,
probs_245,
probs_370,
probs_585)
colnames(results_all) <- c("Warming", "Score" ,"Probability", "Scenario")
# Plotting probabilities as stacked bar graph
ggplot(results_all, aes(fill = Warming, y = Probability, x = Scenario)) +
geom_bar(position = position_fill(reverse = T),
stat = "identity",
width = 0.6) +
scale_y_continuous(breaks = seq(0, 1.0, 0.1)) +
scale_fill_manual(values = c("dark grey", "light coral", "dark red", "black"),
labels = c("1 to 1.5 C", "1.5 to 2 C", "2 to 3 C", "3 to 4 C")) +
coord_flip() +
theme_light()
library(hector)
ini <- system.file("input/hector_ssp245.ini", package = "hector")
n_core <- newcore(ini_245)
NPP <- fetchvars(n_core, NA, NPP_FLUX0())
NPP
NPP_dat <- data.frame(variable = rep(c("NPP"), each = 100000),
NPP_dat <- data.frame(variable = rep(c("NPP"), each = 100000),
value = c(rnorm(100000, mean = 56.2, sd = 14.3)))
NPP_dat <- data.frame(variable = rep(c("NPP"), each = 100000),
value = c(rnorm(100000, mean = 56.2, sd = 14.3)))
View(NPP_dat)
ggplot(NPP_dat, aes(x = value)) +
geom_density()
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 2)
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 1)
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 1,
color = "lightblue1")
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 1,
color = "lightblue1") +
theme_light()
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 1,
color = "dodgerblue") +
theme_light()
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 1,
color = "dodgerblue4") +
theme_light()
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 1,
color = "dodgerblue4") +
geom_vline(aes(xintercept = mean(value)),
color = "darkred",
linetype = "dashed") +
theme_light()
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 1,
color = "dodgerblue4") +
geom_vline(aes(xintercept = mean(value)),
color = "darkred",
linetype = "dashed",
linewidth = 1) +
theme_light()
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 1,
color = "dodgerblue4") +
geom_vline(aes(xintercept = mean(value)),
color = "darkred",
linetype = "dashed",
linewidth = 1) +
scale_y_continuous(expand = c(0,0)) +
theme_light()
ggsave("npp_distribution.png",
device = "png",
path = "figure_output/",
width = 12,
height = 15,
units = c("cm"),
dpi = 300)
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 1,
color = "dodgerblue4") +
geom_vline(aes(xintercept = mean(value)),
color = "darkred",
linetype = "dashed",
linewidth = 1) +
scale_y_continuous(expand = c(0,-0.01)) +
theme_light()
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 1,
color = "dodgerblue4") +
geom_vline(aes(xintercept = mean(value)),
color = "darkred",
linetype = "dashed",
linewidth = 1) +
scale_y_continuous(expand = c(0,0)) +
theme_light()
?xlim
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 1,
color = "dodgerblue4") +
geom_vline(aes(xintercept = mean(value)),
color = "darkred",
linetype = "dashed",
linewidth = 1) +
scale_y_continuous(expand = c(0,0)) +
xlim(0, 0.05) +
theme_light()
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 1,
color = "dodgerblue4") +
geom_vline(aes(xintercept = mean(value)),
color = "darkred",
linetype = "dashed",
linewidth = 1) +
scale_y_continuous(expand = c(0,0)) +
ylim(0, 0.05) +
theme_light()
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 1,
color = "dodgerblue4") +
geom_vline(aes(xintercept = mean(value)),
color = "darkred",
linetype = "dashed",
linewidth = 1) +
ylim(0, 0.03) +
scale_y_continuous(expand = c(0,0)) +
theme_light()
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 1,
color = "dodgerblue4") +
geom_vline(aes(xintercept = mean(value)),
color = "darkred",
linetype = "dashed",
linewidth = 1) +
ylim(0, 0.035) +
scale_y_continuous(expand = c(0,0)) +
theme_light()
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 0.7,
color = "dodgerblue4") +
geom_vline(aes(xintercept = mean(value)),
color = "darkred",
linetype = "dashed",
linewidth = 0.7) +
ylim(0, 0.035) +
scale_y_continuous(expand = c(0,0)) +
theme_light()
ggsave("npp_distribution.png",
device = "png",
path = "figure_output/",
width = 12,
height = 15,
units = c("cm"),
dpi = 300)
NPP_dat <- data.frame(variable = rep(c("NPP"), each = 100),
value = c(rnorm(100000, mean = 56.2, sd = 14.3)))
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 0.7,
color = "dodgerblue4") +
geom_vline(aes(xintercept = mean(value)),
color = "darkred",
linetype = "dashed",
linewidth = 0.7) +
ylim(0, 0.035) +
scale_y_continuous(expand = c(0,0)) +
theme_light()
ggsave("npp_distribution.png",
device = "png",
path = "figure_output/",
width = 12,
height = 15,
units = c("cm"),
dpi = 300)
NPP_dat <- data.frame(variable = rep(c("NPP"), each = 10),
value = c(rnorm(100000, mean = 56.2, sd = 14.3)))
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 0.7,
color = "dodgerblue4") +
geom_vline(aes(xintercept = mean(value)),
color = "darkred",
linetype = "dashed",
linewidth = 0.7) +
ylim(0, 0.035) +
scale_y_continuous(expand = c(0,0)) +
theme_light()
ggsave("npp_distribution.png",
device = "png",
path = "figure_output/",
width = 12,
height = 15,
units = c("cm"),
dpi = 300)
NPP_dat <- data.frame(variable = rep(c("NPP"), each = 1000000),
value = c(rnorm(100000, mean = 56.2, sd = 14.3)))
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 0.7,
color = "dodgerblue4") +
geom_vline(aes(xintercept = mean(value)),
color = "darkred",
linetype = "dashed",
linewidth = 0.7) +
ylim(0, 0.035) +
scale_y_continuous(expand = c(0,0)) +
theme_light()
ggsave("npp_distribution.png",
device = "png",
path = "figure_output/",
width = 12,
height = 15,
units = c("cm"),
dpi = 300)
NPP_dat <- data.frame(variable = rep(c("NPP"), each = 200),
value = c(rnorm(100000, mean = 56.2, sd = 14.3)))
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 0.7,
color = "dodgerblue4") +
geom_vline(aes(xintercept = mean(value)),
color = "darkred",
linetype = "dashed",
linewidth = 0.7) +
ylim(0, 0.035) +
scale_y_continuous(expand = c(0,0)) +
theme_light()
ggsave("npp_distribution.png",
device = "png",
path = "figure_output/",
width = 12,
height = 15,
units = c("cm"),
dpi = 300)
NPP_dat <- data.frame(variable = rep(c("NPP"), each = 200),
value = c(rnorm(100000, mean = 56.2, sd = 14.3)))
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 0.7,
color = "dodgerblue4") +
geom_vline(aes(xintercept = mean(value)),
color = "darkred",
linetype = "dashed",
linewidth = 0.7) +
ylim(0, 0.035) +
scale_y_continuous(expand = c(0,0)) +
theme_light()
NPP_dat <- data.frame(variable = rep(c("NPP"), each = 200),
value = c(rnorm(100000, mean = 56.2, sd = 14.3)))
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 0.7,
color = "dodgerblue4") +
geom_vline(aes(xintercept = mean(value)),
color = "darkred",
linetype = "dashed",
linewidth = 0.7) +
ylim(0, 0.035) +
scale_y_continuous(expand = c(0,0)) +
theme_light()
NPP_dat <- data.frame(variable = rep(c("NPP"), each = 200),
value = c(rnorm(100000, mean = 56.2, sd = 14.3)))
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 0.7,
color = "dodgerblue4") +
geom_vline(aes(xintercept = mean(value)),
color = "darkred",
linetype = "dashed",
linewidth = 0.7) +
ylim(0, 0.035) +
scale_y_continuous(expand = c(0,0)) +
theme_light()
NPP_dat <- data.frame(variable = rep(c("NPP"), each = 2000),
value = c(rnorm(100000, mean = 56.2, sd = 14.3)))
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 0.7,
color = "dodgerblue4") +
geom_vline(aes(xintercept = mean(value)),
color = "darkred",
linetype = "dashed",
linewidth = 0.7) +
ylim(0, 0.035) +
scale_y_continuous(expand = c(0,0)) +
theme_light()
NPP_dat <- data.frame(variable = rep(c("NPP"), each = 2000),
value = c(rnorm(100000, mean = 56.2, sd = 14.3)))
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 0.7,
color = "dodgerblue4") +
geom_vline(aes(xintercept = mean(value)),
color = "darkred",
linetype = "dashed",
linewidth = 0.7) +
ylim(0, 0.035) +
scale_y_continuous(expand = c(0,0)) +
theme_light()
ggsave("npp_distribution.png",
device = "png",
path = "figure_output/",
width = 12,
height = 15,
units = c("cm"),
dpi = 300)
ggsave("npp_distribution.png",
device = "png",
path = "figure_output/",
width = 15,
height = 15,
units = c("cm"),
dpi = 300)
ggsave("npp_distribution.png",
device = "png",
path = "figure_output/",
width = 15,
height = 12,
units = c("cm"),
dpi = 300)
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 0.7,
color = "dodgerblue4",
fill = "lightblue1",
alpha = 0.5) +
geom_vline(aes(xintercept = mean(value)),
color = "darkred",
linetype = "dashed",
linewidth = 0.7) +
ylim(0, 0.035) +
scale_y_continuous(expand = c(0,0)) +
polygon(color)
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 0.7,
color = "dodgerblue4",
fill = "lightblue1",
alpha = 0.5) +
geom_vline(aes(xintercept = mean(value)),
color = "darkred",
linetype = "dashed",
linewidth = 0.7) +
scale_y_continuous(expand = c(0,0)) +
theme_light()
ggplot(NPP_dat, aes(x = value)) +
geom_density(linewidth = 0.7,
color = "dodgerblue4",
fill = "lightblue1",
alpha = 0.3) +
geom_vline(aes(xintercept = mean(value)),
color = "darkred",
linetype = "dashed",
linewidth = 0.7) +
scale_y_continuous(expand = c(0,0)) +
theme_light()
ggsave("npp_distribution.png",
device = "png",
path = "figure_output/",
width = 15,
height = 12,
units = c("cm"),
dpi = 300)
# Running hector for each scenario
start <- Sys.time()
set.seed(2)
hector_126 <- scored_hector_runs(ini_126, ssp_name = "ssp126", 50, criterion_co2_obs())
hector_245 <- scored_hector_runs(ini_245, ssp_name = "ssp245", 50, criterion_co2_obs())
hector_370 <- scored_hector_runs(ini_370, ssp_name = "ssp370", 50, criterion_co2_obs())
hector_585 <- scored_hector_runs(ini_585, ssp_name = "ssp585", 50, criterion_co2_obs())
print( Sys.time() - start )
# Load BMA package
library(BMA)
# View Hector for one the of the SSPs
View(hector_245)
?newcore
?generate_params
library(matilda)
# establish new core
core <- newcore(system.file("input/hector_ssp245.ini", package = "hector"))
# generate a new set of parameters
params <- generate_params(core, 3)
# get a hector result
h_result <- iterate_hector(core, params)
View(h_result)
# observed data
obs <- criterion_co2_obs()
obs$years
h_res_subset <- subset(h_result, year = 1959:2021)
View(h_res_subset)
?subset
h_res_subset <- subset(h_result, year == 1959:2021)
# get a hector result
h_result <- iterate_hector(core, params)
h_res_subset <- subset(h_result, year == 1959:2021)
View(h_res_subset)
# get a hector result
h_result <- iterate_hector(core, params)
h_res_subset <- subset(h_result, run_number == 1:3, year == 1959:2021)
# get a hector result
h_result <- iterate_hector(core, params)
h_res_subset <- subset(h_result, run_number == 1:3, year == 1959:2021)
View(h_res_subset)
# get a hector result
h_result <- iterate_hector(core, params)
# get a hector result
h_result <- iterate_hector(core, params)
# observed data
obs <- criterion_co2_obs()
rm(h_res_subset)
# what prior is used
prior_prob <- rep(1/3, 6672)
# fromula for the BMA analysis
formula <- obs$obs_values ~ h_result$value
# Run BMA analysis
bma_results <- bic.glm(formula, data = NULL, prior.param = prior_prob)
# Run BMA analysis
bma_results <- bic.glm(formula, prior.param = prior_prob)
?bma.glm
bic.glm()
?bic.glm
library(survival)
data(veteran)
library(veteran)
install.packages("veteran")
library(survival)
data(veteran)
library(survival)
install.packages("survival")
install.packages("survival")
library(survival)
data(veteran)
x<- rbind(
c(0, 0, 0),
c(0, 1, 0),
c(1, 0, 0),
c(1, 1, 1))
y<-c(4, 16, 1, 21)
n<-c(1,1,1,1)
models<- rbind(
c(1, 1, 0),
c(1, 1, 1))
glm.out.yates <- bic.glm( x, y, n, glm.family = poisson(),
factor.type=FALSE)
summary(glm.out.yates)
glm.out.yates$prior.model.weights
glm.out.yates$postmean
